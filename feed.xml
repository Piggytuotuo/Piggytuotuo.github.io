

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Piggytuotuo</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2023-04-18T17:21:08+08:00</updated>
  <author>
    <name>Piggytuotuo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 Piggytuotuo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>DP-背包问题</title>
    <link href="http://localhost:4000/posts/leetcode-dp-bag/" rel="alternate" type="text/html" title="DP-背包问题" />
    <published>2023-04-18T15:00:00+08:00</published>
  
    <updated>2023-04-18T15:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/leetcode-dp-bag/</id>
    <content src="http://localhost:4000/posts/leetcode-dp-bag/" />
    <author>
      <name>piggy</name>
    </author>

  
    
    <category term="LeetCode" />
    
  

  
    <summary>
      





      背包问题

属于动态规划的一类问题，需要明确状态和选择。

状态：背包的容量 和 可选择的物品；选择：装 和 不装

01背包：

每个物品只能装一次，选择装/不装。

定义状态转移方程dp[i][w]：

对于前i个物品，当前背包的容量是w时，可以获得的最大价值是dp[i][w]。

int[][] dp = new int[N+1][M+1]
//base case
dp[0][...] = 0
dp[...][0] = 0
//使用wt[i-1]表示第i个物品的重量 val[i-1]表示第i个物品的价值
for i in [1...N]:
    for w in [1...M]:
        //考虑                 不装入     装入
        dp[i][w] = Math.max(dp[i-1][w],  dp[i-1][w-wt[i-1]]...
    </summary>
  

  </entry>

  
  <entry>
    <title>DP</title>
    <link href="http://localhost:4000/posts/leetcode-dp/" rel="alternate" type="text/html" title="DP" />
    <published>2023-04-14T20:40:00+08:00</published>
  
    <updated>2023-04-14T20:40:00+08:00</updated>
  
    <id>http://localhost:4000/posts/leetcode-dp/</id>
    <content src="http://localhost:4000/posts/leetcode-dp/" />
    <author>
      <name>piggy</name>
    </author>

  
    
    <category term="LeetCode" />
    
  

  
    <summary>
      





      引言
跟着labuladong刷动态规划题的记录。DP三要素：重叠子问题、最优子结构、状态转移方程

重叠子问题
计算Fibonacci数列时，f(4) = f(3) + f(2), f(3) = f(2) + f(1), f(2)会重复计算两次，为一个重叠的子问题。

若暴力递归，进行重复计算，时间复杂度为$O(2 ^ n)$;

为了避免重复计算，引入备忘录，存储子问题的答案，时间复杂度降低为$O(n)$。

状态转移方程
受备忘录启发，引入DP table，存储子问题的答案，完成自底向上的推算，即列出状态转移方程。
如Fibonacci：dp[n] = dp[n - 1] + dp[n - 2], n &amp;gt; 1。

更进一步，由于n的状态只跟n-1和n-2相关，只需要存储前两个状态，可以使用2个变量滚动更新。

写状态转移方程的思路：base case -&amp;gt; 状态 -...
    </summary>
  

  </entry>

  
  <entry>
    <title>回溯</title>
    <link href="http://localhost:4000/posts/leetcode-backtrack/" rel="alternate" type="text/html" title="回溯" />
    <published>2023-04-13T14:10:00+08:00</published>
  
    <updated>2023-04-13T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/leetcode-backtrack/</id>
    <content src="http://localhost:4000/posts/leetcode-backtrack/" />
    <author>
      <name>piggy</name>
    </author>

  
    
    <category term="LeetCode" />
    
  

  
    <summary>
      





      引言
跟着labuladong刷回溯题的记录。

使用【回溯法】解决【子集、排列】问题：
分为【子集 元素无重复】 【子集 元素有重复】 【排列 元素无重复】 【排列 元素有重复】四类。
子集 无重
leetcode 78

给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。
解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。
示例 1：
输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
示例 2：
输入：nums = [0]
输出：[[],[0]]


在回溯时传递i：

class Solution {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new LinkedList&amp;lt;&amp;gt;();
    Linke...
    </summary>
  

  </entry>

  
  <entry>
    <title>Java常用代码</title>
    <link href="http://localhost:4000/posts/learn-java/" rel="alternate" type="text/html" title="Java常用代码" />
    <published>2023-04-13T14:10:00+08:00</published>
  
    <updated>2023-04-13T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/learn-java/</id>
    <content src="http://localhost:4000/posts/learn-java/" />
    <author>
      <name>piggy</name>
    </author>

  
    
    <category term="Java基础" />
    
  

  
    <summary>
      





      在线文档
https://www.matools.com/api/java8
从键盘输入
Scanner sc =new Scanner(System.in);
Integer a=sc.nextInt();


int、Integer、Double
int为基本数据类型，Integer为int对应的包装类。
在范型中使用Integer

HashMap&amp;lt;String,Integer&amp;gt; mymap=new HashMap&amp;lt;String,Integer&amp;gt;(); 判断两个int是否相等或Integer与int是否相等，用== 判断两个Integer是否相等用.equals()

System.out.println(m.peekFirst()==q.peek()); //not always true
System.out.println(m.peekFirst(...
    </summary>
  

  </entry>

  
  <entry>
    <title>wsl创建ubuntu+mysql安装+redis安装</title>
    <link href="http://localhost:4000/posts/wsl/" rel="alternate" type="text/html" title="wsl创建ubuntu+mysql安装+redis安装" />
    <published>2023-03-15T14:10:00+08:00</published>
  
    <updated>2023-03-15T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/wsl/</id>
    <content src="http://localhost:4000/posts/wsl/" />
    <author>
      <name>piggy</name>
    </author>

  
    
    <category term="Java基础" />
    
  

  
    <summary>
      





      

方式一 vmware安装

安装vmware,下载ubuntu的iso文件

ubuntu-releases安装包下载_开源镜像站-阿里云

i386是32位 amd64是64位



方式二 wsl安装

1. 在启动或关闭Windows功能中，打开以下两项，重启



 2. powershell以管理员身份打开



在mic store安装分发版也可

查看已经安装的分发版



打开Ubuntu报错：WslRegisterDistribution failed with error: 0x800701bc

原因是：wsl1升级到wsl2之后，内核没有升级。

解决方法：


  下载最新的wsl安装包，
  安装包下载后，直接运行安装。


 下载地址：

https://wslstorestorage.blob.core.windows.net/wslblob/ws...
    </summary>
  

  </entry>

</feed>


