

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Piggytuotuo</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2023-04-13T15:40:48+08:00</updated>
  <author>
    <name>Piggytuotuo</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator>
  <rights> © 2023 Piggytuotuo </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Java常用代码</title>
    <link href="http://localhost:4000/posts/learn-java/" rel="alternate" type="text/html" title="Java常用代码" />
    <published>2023-04-13T14:10:00+08:00</published>
  
    <updated>2023-04-13T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/learn-java/</id>
    <content src="http://localhost:4000/posts/learn-java/" />
    <author>
      <name>piggy</name>
    </author>

  
    
    <category term="Java基础" />
    
  

  
    <summary>
      





      在线文档
https://www.matools.com/api/java8
从键盘输入
Scanner sc =new Scanner(System.in);
Integer a=sc.nextInt();


int、Integer、Double
int为基本数据类型，Integer为int对应的包装类。
在范型中使用Integer

HashMap&amp;lt;String,Integer&amp;gt; mymap=new HashMap&amp;lt;String,Integer&amp;gt;(); 判断两个int是否相等或Integer与int是否相等，用== 判断两个Integer是否相等用.equals()

System.out.println(m.peekFirst()==q.peek()); //not always true
System.out.println(m.peekFirst(...
    </summary>
  

  </entry>

  
  <entry>
    <title>Leetcode回溯</title>
    <link href="http://localhost:4000/posts/learn-backtrack/" rel="alternate" type="text/html" title="Leetcode回溯" />
    <published>2023-04-13T14:10:00+08:00</published>
  
    <updated>2023-04-13T14:10:00+08:00</updated>
  
    <id>http://localhost:4000/posts/learn-backtrack/</id>
    <content src="http://localhost:4000/posts/learn-backtrack/" />
    <author>
      <name>piggy</name>
    </author>

  
    
    <category term="Leetcode" />
    
  

  
    <summary>
      





      引言
跟着labuladong刷回溯题的记录。

使用【回溯法】解决【子集、排列】问题：
分为【子集 元素无重复】 【子集 元素有重复】 【排列 元素无重复】 【排列 元素有重复】四类。
子集 无重
leetcode 78

给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。
解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。
示例 1：
输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
示例 2：
输入：nums = [0]
输出：[[],[0]]


在回溯时传递i：

class Solution {
    List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; res = new LinkedList&amp;lt;&amp;gt;();
    Linke...
    </summary>
  

  </entry>

</feed>


